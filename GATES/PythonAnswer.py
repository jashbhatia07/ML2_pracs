# -*- coding: utf-8 -*-
"""ML2_Q1to6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dSDBiFswwk7YgOoqerpWEd7cFjEp-sK4
"""

import numpy as np

def step(v):
	if v>=0:
		return 1
	return 0
	
def perceptron(x, w, b):
	y = np.dot(w, x) + b
	return step(y)

"""1. AND"""

def AND(x):
    w = np.array([1, 1])
    b = -2
    return perceptron(x, w, b)

p1 = np.array([1, 1])
p2 = np.array([1, 0])
p3 = np.array([0, 1])
p4 = np.array([0, 0])

print("AND(1,1) =",AND(p1))
print("AND(1,0) =",AND(p2))
print("AND(0,1) =",AND(p3))
print("AND(0,0) =",AND(p4))

"""2. OR"""

def OR(x):
    w = np.array([1, 1])
    b = -1
    return perceptron(x, w, b)

p1 = np.array([1, 1])
p2 = np.array([1, 0])
p3 = np.array([0, 1])
p4 = np.array([0, 0])

print("OR(1,1) =",OR(p1))
print("OR(1,0) =",OR(p2))
print("OR(0,1) =",OR(p3))
print("OR(0,0) =",OR(p4))

"""3. NOT"""

def NOT(x):
  w=-1
  b=0.5
  return perceptron(x,w,b)

print("NOT(0) =",NOT(0))
print("NOT(1) =",NOT(1))

"""4. NOR"""

def NOR(x):
    return NOT(OR(x))

print("NOR(1,1) =",NOR(p1))
print("NOR(1,0) =",NOR(p2))
print("NOR(0,1) =",NOR(p3))
print("NOR(0,0) =",NOR(p4))

"""5. NAND"""

def NAND(x):
    return NOT(AND(x))

p1 = np.array([1, 1])
p2 = np.array([1, 0])
p3 = np.array([0, 1])
p4 = np.array([0, 0])

print("NAND(1,1) =",NAND(p1))
print("NAND(1,0) =",NAND(p2))
print("NAND(0,1) =",NAND(p3))
print("NAND(0,0) =",NAND(p4))

"""6. XOR"""

def EXOR(x):
    return AND(np.array([NAND(x),OR(x)]))

p1 = np.array([1, 1])
p2 = np.array([1, 0])
p3 = np.array([0, 1])
p4 = np.array([0, 0])

print("EXOR(1,1) =",EXOR(p1))
print("EXOR(1,0) =",EXOR(p2))
print("EXOR(0,1) =",EXOR(p3))
print("EXOR(0,0) =",EXOR(p4))